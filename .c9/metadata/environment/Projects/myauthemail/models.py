{"filter":false,"title":"models.py","tooltip":"/Projects/myauthemail/models.py","undoManager":{"mark":13,"position":13,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["from django.db import models","","# Create your models here.",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":14,"column":24},"action":"insert","lines":["\"\"\"Declare models for YOUR_APP app.\"\"\"","","from django.contrib.auth.models import AbstractUser","from django.db import models","from django.utils.translation import ugettext_lazy as _","","","class User(AbstractUser):","    \"\"\"User model.\"\"\"","","    username = None","    email = models.EmailField(_('email address'), unique=True)","","    USERNAME_FIELD = 'email'","    REQUIRED_FIELDS = []"]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["\"\"\"Declare models for YOUR_APP app.\"\"\"",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["from django.contrib.auth.models import AbstractUser","from django.db import models","from django.utils.translation import ugettext_lazy as _",""],"id":5},{"start":{"row":0,"column":0},"end":{"row":36,"column":65},"action":"insert","lines":["from django.contrib.auth.models import AbstractUser, BaseUserManager ## A new class is imported. ##","from django.db import models","from django.utils.translation import ugettext_lazy as _","","","class UserManager(BaseUserManager):","    \"\"\"Define a model manager for User model with no username field.\"\"\"","","    use_in_migrations = True","","    def _create_user(self, email, password, **extra_fields):","        \"\"\"Create and save a User with the given email and password.\"\"\"","        if not email:","            raise ValueError('The given email must be set')","        email = self.normalize_email(email)","        user = self.model(email=email, **extra_fields)","        user.set_password(password)","        user.save(using=self._db)","        return user","","    def create_user(self, email, password=None, **extra_fields):","        \"\"\"Create and save a regular User with the given email and password.\"\"\"","        extra_fields.setdefault('is_staff', False)","        extra_fields.setdefault('is_superuser', False)","        return self._create_user(email, password, **extra_fields)","","    def create_superuser(self, email, password, **extra_fields):","        \"\"\"Create and save a SuperUser with the given email and password.\"\"\"","        extra_fields.setdefault('is_staff', True)","        extra_fields.setdefault('is_superuser', True)","","        if extra_fields.get('is_staff') is not True:","            raise ValueError('Superuser must have is_staff=True.')","        if extra_fields.get('is_superuser') is not True:","            raise ValueError('Superuser must have is_superuser=True.')","","        return self._create_user(email, password, **extra_fields)"]}],[{"start":{"row":45,"column":24},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":46,"column":0},"end":{"row":46,"column":4},"action":"insert","lines":["    "]},{"start":{"row":46,"column":4},"end":{"row":47,"column":0},"action":"insert","lines":["",""]},{"start":{"row":47,"column":0},"end":{"row":47,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":47,"column":4},"end":{"row":47,"column":73},"action":"insert","lines":["objects = UserManager() ## This is the new line in the User model. ##"],"id":7}],[{"start":{"row":47,"column":73},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":8},{"start":{"row":48,"column":0},"end":{"row":48,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":0,"column":0},"end":{"row":48,"column":4},"action":"remove","lines":["from django.contrib.auth.models import AbstractUser, BaseUserManager ## A new class is imported. ##","from django.db import models","from django.utils.translation import ugettext_lazy as _","","","class UserManager(BaseUserManager):","    \"\"\"Define a model manager for User model with no username field.\"\"\"","","    use_in_migrations = True","","    def _create_user(self, email, password, **extra_fields):","        \"\"\"Create and save a User with the given email and password.\"\"\"","        if not email:","            raise ValueError('The given email must be set')","        email = self.normalize_email(email)","        user = self.model(email=email, **extra_fields)","        user.set_password(password)","        user.save(using=self._db)","        return user","","    def create_user(self, email, password=None, **extra_fields):","        \"\"\"Create and save a regular User with the given email and password.\"\"\"","        extra_fields.setdefault('is_staff', False)","        extra_fields.setdefault('is_superuser', False)","        return self._create_user(email, password, **extra_fields)","","    def create_superuser(self, email, password, **extra_fields):","        \"\"\"Create and save a SuperUser with the given email and password.\"\"\"","        extra_fields.setdefault('is_staff', True)","        extra_fields.setdefault('is_superuser', True)","","        if extra_fields.get('is_staff') is not True:","            raise ValueError('Superuser must have is_staff=True.')","        if extra_fields.get('is_superuser') is not True:","            raise ValueError('Superuser must have is_superuser=True.')","","        return self._create_user(email, password, **extra_fields)","","class User(AbstractUser):","    \"\"\"User model.\"\"\"","","    username = None","    email = models.EmailField(_('email address'), unique=True)","","    USERNAME_FIELD = 'email'","    REQUIRED_FIELDS = []","    ","    objects = UserManager() ## This is the new line in the User model. ##","    "],"id":9},{"start":{"row":0,"column":0},"end":{"row":48,"column":27},"action":"insert","lines":["from django.contrib.auth.models import AbstractUser, BaseUserManager","from django.db import models","from django.utils.translation import ugettext_lazy as _","","","class UserManager(BaseUserManager):","    \"\"\"Define a model manager for User model with no username field.\"\"\"","","    use_in_migrations = True","","    def _create_user(self, email, password, **extra_fields):","        \"\"\"Create and save a User with the given email and password.\"\"\"","        if not email:","            raise ValueError('The given email must be set')","        email = self.normalize_email(email)","        user = self.model(email=email, **extra_fields)","        user.set_password(password)","        user.save(using=self._db)","        return user","","    def create_user(self, email, password=None, **extra_fields):","        \"\"\"Create and save a regular User with the given email and password.\"\"\"","        extra_fields.setdefault('is_staff', False)","        extra_fields.setdefault('is_superuser', False)","        return self._create_user(email, password, **extra_fields)","","    def create_superuser(self, email, password, **extra_fields):","        \"\"\"Create and save a SuperUser with the given email and password.\"\"\"","        extra_fields.setdefault('is_staff', True)","        extra_fields.setdefault('is_superuser', True)","","        if extra_fields.get('is_staff') is not True:","            raise ValueError('Superuser must have is_staff=True.')","        if extra_fields.get('is_superuser') is not True:","            raise ValueError('Superuser must have is_superuser=True.')","","        return self._create_user(email, password, **extra_fields)","","","class User(AbstractUser):","    \"\"\"User model.\"\"\"","","    username = None","    email = models.EmailField(_('email address'), unique=True)","","    USERNAME_FIELD = 'email'","    REQUIRED_FIELDS = []","","    objects = UserManager()"]}],[{"start":{"row":48,"column":27},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":10},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "]},{"start":{"row":49,"column":4},"end":{"row":50,"column":0},"action":"insert","lines":["",""]},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"remove","lines":["    "],"id":11},{"start":{"row":49,"column":4},"end":{"row":50,"column":0},"action":"remove","lines":["",""]},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"remove","lines":["    "]},{"start":{"row":48,"column":27},"end":{"row":49,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":48,"column":27},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":12},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"remove","lines":["    "],"id":13}],[{"start":{"row":49,"column":0},"end":{"row":50,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":50,"column":0},"end":{"row":54,"column":56},"action":"insert","lines":["class Profile(models.Model):","    user = models.OneToOneField(User, on_delete=models.CASCADE)","    bio = models.TextField(max_length=500, blank=True)","    location = models.CharField(max_length=30, blank=True)","    birth_date = models.DateField(null=True, blank=True)"],"id":15}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":18,"column":19},"end":{"row":18,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1530212113751,"hash":"be076a2627ce401e94f6b45ea854af0e4a318606"}